#!/bin/bash -e

sinfo() {
    echo -e "\033[1;33;41m$@\033[0m"
}


# Sanity check
if [ ${PHASE} != copy ]; then
    echo "This is phase [${PHASE}], run $0 in phase [copy]."
    exit 1
fi


sinfo "Cleaning up portage configuration"
sed -i '/^@temporary$/d' /etc/portage/sets/all
rm /etc/portage/package.use/temporary


# This recompiles packages with TEMP flags in package.use
sinfo "Recompiling build-dependent packages"
emerge -quDN @world


# (#432020, SourceWare: #14498)
# sinfo "Creating NSS databases"
# make -C /var/db > /dev/null


sinfo "Keeping gcc/libtool shared libs"
sed -i '\:^... /usr/lib/gcc/.*\.so\>:d'    /var/db/pkg/sys-devel/gcc-[0-9]*/CONTENTS
sed -i '\:^... /usr/lib/libltdl.*\.so\>:d' /var/db/pkg/sys-devel/libtool-[0-9]*/CONTENTS
echo sys-devel/libtool-2.2.10 >> /etc/portage/profile/package.provided


sinfo "Patching selected ebuilds for depclean"

# Python
# portage:               pretend it doesn't need Python (allows orphaned packages depclean)
# gobject-introspection: g-ir-* + giscanner package  (#493802, build-time for other pkgs)
#                        virtual/pkg-config          (#505408)
${helpdir}/flt-ebuild sys-apps/portage               '\<(dev-lang/python|dev-python)\>'
${helpdir}/flt-ebuild dev-libs/gobject-introspection '\<(dev-lang/python|virtual/pkgconfig)\>'

# Perl
# pptpclient:            not needed when used by networkmanager-pptp
# lm_sensors:            sensors-detect, sensors-conf-convert
# vpnc:                  pcf2vpnc
${helpdir}/flt-ebuild net-dialup/pptpclient '\<dev-lang/perl\>'
${helpdir}/flt-ebuild sys-apps/lm_sensors   '\<dev-lang/perl\>'
${helpdir}/flt-ebuild net-misc/vpnc         '\<dev-lang/perl\>'

# [debianutils]          ca-certificates:  update-ca-certificates
${helpdir}/flt-ebuild app-misc/ca-certificates '\<sys-apps/debianutils\>'

# [groff]                man:  not needed with preformatted pages
${helpdir}/flt-ebuild sys-apps/man '\<(sys-apps/groff|app-doc/heirloom-doctools)\>'


sinfo "Generating man pages cache"
${helpdir}/gen-man-cache


sinfo "Unmerging build and temporary dependencies"
mv /etc/portage/profile/packages{.off,}
emerge -qc --with-bdeps=n


# Any problem will cause a fatal error
sinfo "Checking linking consistency"
revdep-rebuild -qi


sinfo "Faking Python removal"
dbpython=`mktemp -d`
mv /var/db/pkg/dev-lang/python-* ${dbpython}


# Will fail if there are still Python dependencies
# revdep-rebuild is unavailable after this point
sinfo "Unmerging orphaned packages"
sed -i '/^@temporary-late$/d' /etc/portage/sets/all
emerge -qc --with-bdeps=n

ln -s python3 /usr/bin/python-wrapper


# Dependencies:
# sandbox: -
# portage: [python], sandbox, pax-utils
sinfo "Unmerging portage sandbox"
emerge -qC sys-apps/sandbox


sinfo "Removing development files"
rm /etc/env.d/{??binutils,??gcc-i686-pc-linux-gnu,??nss-x86}
rm /lib/cpp /usr/bin/cc
for f in /usr/bin/i686-pc-linux-gnu-*; do
    rm ${f} /usr/bin/${f#/usr/bin/i686-pc-linux-gnu-}
done


sinfo "Updating environment"
env-update


sinfo "Unmerging portage"
eb_portage=`find /var/db/pkg/sys-apps -path '/var/db/pkg/sys-apps/portage-*/portage-*.ebuild'`
sed -i '\:^... /usr/lib/portage/:d' ${eb_portage%/*}/CONTENTS
FEATURES="-sandbox -usersandbox" ebuild ${eb_portage} unmerge 1>/dev/null
rm -r /usr/lib/portage/


sinfo "Actually removing Python"
rm -f `awk '! /^dir / { print $2 }' ${dbpython}/python-*/CONTENTS`
rm -r /usr/lib/python*/ /usr/include/python*/
rm -r ${dbpython}


sinfo "Trimming icons directories and cache"
for theme in /usr/share/icons/*/index.theme; do
    find `dirname ${theme}` -maxdepth 1 \( -name '[5-9][0-9]x*' -o -name '[1-9][0-9][0-9]x*' \) -exec rm -r {} \;

    # Remove all icons > 48x48 from the theme
    awk '/^\[/ { x=1; if(match($0,/^\[([0-9]+)x/,ar) != 0 && ar[1]>48) x=42; } { if (x!=42) print; }' ${theme} \
        | sed 's/,\([5-9][0-9]\|[1-9][0-9][0-9]\)x[^,]*//g; s/\(=16,22,32,48\),.*/\1/' > ${theme}.new
    mv ${theme}.new ${theme}
done

find /usr/share/icons -mindepth 1 -maxdepth 1 -type d \
    -exec gtk-update-icon-cache -q -f -i    {} \;
find /usr/share -mindepth 3 -type d -name hicolor \
    -exec gtk-update-icon-cache -q -f -i -t {} \;


sinfo "Trimming man pages cache"
${helpdir}/gen-man-cache clean


sinfo "Regenerating fonts cache"
fc-cache -fs


sinfo "Regenerating MIME and desktop DBs"
update-mime-database       /usr/share/mime
update-desktop-database -q /usr/share/applications


# http://www.freedesktop.org/wiki/Specifications/mime-actions-spec
# sinfo "Modifying MIME actions ordering preferences"
# sed -i ... /usr/share/applications/mimeinfo.cache


sinfo "Generating GIO modules cache"
gio-querymodules /usr/lib/gio/modules


sinfo "Generating GStreamer cache"
rm -rf /var/cache/gstreamer
/usr/bin/gst-inspect* 1>/dev/null
chmod -R go=u,go-w /var/cache/gstreamer


sinfo "Uncompressing selected files"
gunzip `find /usr/share/consolefonts -name '*.gz'` \
       `find /usr/share/keymaps      -name '*.gz'`


sinfo "Creating specialized Xorg driver directories"
mkdir /usr/lib/xorg/modules/drivers.{native,vesa,fbdev,modesetting}
ln    /usr/lib/xorg/modules/drivers{/*.so,.native}
mv    /usr/lib/xorg/modules/drivers{.native/vesa_drv.so,.vesa}
mv    /usr/lib/xorg/modules/drivers{.native/fbdev_drv.so,.fbdev}
mv    /usr/lib/xorg/modules/drivers{.native/modesetting_drv.so,.modesetting}


sinfo "Symlinking /var/tmp and disabling /dev/shm mount"
rm -r /var/tmp
ln -s ../tmp /var/tmp
sed -i 's/\<tmpfs\>/disabled/' /etc/init.d/devfs


sinfo "Setting cables-related and /root permissions"
chmod 710 /home/anon{,/persist{,/security}}
chmod -R go= /root


sinfo "Removing invalid symlinks"
find / -xdev -xtype l -delete


sinfo "Updating ld cache"
eselect env update 2>/dev/null
sed -i '/ CONFIG_PROTECT\(_MASK\)\?[ =]/d' /etc/{profile,csh}.env


# Spaces in entries are not handled, but it doesn't matter here
sinfo "Saving current packages list in /tmp/transient/pkg"
rm -rf /tmp/transient
pakdir=/tmp/transient/pkg
mkdir -p ${pakdir}
for p in `find /var/db/pkg -mindepth 2 -maxdepth 2 -type d -printf '%P\n'`; do
    sed -n 's/^\(obj\|sym\) \([^ ]\+\).*$/\2/p' /var/db/pkg/${p}/CONTENTS > ${pakdir}/${p//\//=}
done


sinfo "Done."
