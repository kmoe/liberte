#!/bin/bash -e

set -x

# Parameter:
#   + (none):  build and install main and kexec kernels
#   + prepare: prepare main kernel for building external modules
#   + modules: build and install main kernel modules and firmware
cmd="$1"


# Build host anonymity
bver=KBUILD_BUILD_VERSION=0
bts=KBUILD_BUILD_TIMESTAMP=`date -u +%F`
buser=KBUILD_BUILD_USER=liberte
bhost=KBUILD_BUILD_HOST=dee.su


# Module signing keys
sbdir=/usr/local/addons/secureboot
sb_kmod=${sbdir}/Liberte-SecureBoot-Kernel-1
sighash=sha256


# Paths
kernsrc=/usr/src/linux-${kversion}
mainobj=/usr/src/linux-main
kexecobj=/usr/src/linux-kexec

mainimg=/boot/kernel-x86.zi
mainmod=/lib/modules/${kversion}
initrd=/usr/local/addons/initrd/initrd-x86.cpio
kexecimg=/usr/local/boot/kernel-kexec.zi

bzimage=arch/x86/boot/bzImage
fwpath=/usr/local/addons/shipped-fw


# Make options
makeopts=`portageq envvar MAKEOPTS`
rmake="make ${makeopts} -C ${kernsrc} ${bver} ${bts} ${buser} ${bhost}"
make="sudo -n -u bin ${rmake}"


# Ensure presence of module signing keys / certs
# (MODSECKEY / MODPUBKEY do not affect kernel/system_certificates.o)
if [ ! -e ${mainobj}/signing_key.x509 ]; then
    ln -s    ${sb_kmod}.der ${mainobj}/signing_key.x509
    ln -s    ${sb_kmod}.key ${mainobj}/signing_key.priv
    touch -d 1970-01-01     ${mainobj}/x509.genkey
    chown -h bin:bin        ${mainobj}/signing_key.{x509,priv} \
                            ${mainobj}/x509.genkey
fi


# Handle kernel preparation for building external modules
if [ "${cmd}" = prepare ]; then
    # sudo might not be available at this stage
    su - -s /bin/sh bin -c "${rmake} O=${mainobj} modules_prepare" 2>/dev/null
    exit
elif [ "${cmd}" = modules ]; then
    # vmlinux is necessary for System.map (although initramfs may not exist yet,
    # or is outdated), which is needed for module dependencies to be used by
    # gen-initramfs; this also generates gen_init_cpio
    if [ ! -e ${initrd} ]; then
        touch ${initrd}
    fi
    ${make}  O=${mainobj} vmlinux 2>/dev/null

    # Build main kernel modules (chmod due to GRKERNSEC_HIDESYM)
    ${make}  O=${mainobj} modules 2>/dev/null
    ${rmake} O=${mainobj} INSTALL_FW_PATH=${fwpath} modules_install

    rm ${mainmod}/{build,source}
    chmod go= ${mainmod}

    # Sign out-of-tree modules (#447352)
    find ${mainmod} -mindepth 2 ! -path "${mainmod}/kernel/*" -type f -name '*.ko' | \
    while read mod; do
        if [ -z "`modinfo -F sig_key ${mod}`" ]; then
            ${kernsrc}/scripts/sign-file ${sighash} ${sb_kmod}.key ${sb_kmod}.der "${mod}"
        fi
    done

    # Verify all module signatures
    echo "Verifying installed modules signatures"
    sigkey="`openssl x509 -inform der -in ${sb_kmod}.der -noout -text \
             | sed -n '/\<X509v3 Subject Key Identifier:/{n; s/^ *//p}'`"
    find ${mainmod} -type f -name '*.ko' | while read mod; do
        mod_sigkey="`modinfo -F sig_key ${mod}`"
        mod_sighash="`modinfo -F sig_hashalgo ${mod}`"
        if [ -z "${mod_sigkey}" ]; then
            echo "${mod} is unsigned"
            exit 1
        elif [ "${mod_sigkey}" != "${sigkey}"  -o  "${mod_sighash}" != "${sighash}" ]; then
            echo "${mod} is signed with unexpected sigkey/sighash"
            exit 1
        fi
    done

    exit
fi


# Build main kernel (chmod due to GRKERNSEC_HIDESYM)
${make} O=${mainobj} bzImage 2>/dev/null
cp ${mainobj}/${bzimage} ${mainimg}

chmod go= ${mainimg}


# Cross-compile 64-bit KEXEC kernel
# (x86_64-gcc is a wrapper, x86_64-{ar,ld,nm,objcopy} are symlinks)
${make} O=${kexecobj} ARCH=x86_64 CROSS_COMPILE=x86_64- bzImage 2>/dev/null
cp ${kexecobj}/${bzimage} ${kexecimg}
