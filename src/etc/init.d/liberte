#!/sbin/runscript

description="Sets up OTFE virtual partition."

depend() {
    # start after power management is enabled and drives were probed
    after laptop_mode smartd

    # use entropy for encrypted storage, if available
    use entropy

    # password entry is on console
    after  clock numlock gpm consolefont
    before xdm

    # Avoid ps-mount reloading autofs upon LVM partition attachment
    before autofs

    # Dependents wait indefinitely (important for parallel startup)
    keyword -timeout
}


# Prompt to print before password requests
eprompt() {
    local stars=`echo "$@" | sed 's/./-/g'`
    local keymap=`. /etc/conf.d/keymaps; echo \"${keymap}\" | tr '[:lower:]' '[:upper:]'`
    echo
    einfo "${stars}"
    einfo "$@"
    einfo "Keyboard map: ${keymap} (or use left/right-click to c&p)"
    einfo "  ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz"
    einfo "  0123456789  ()[]{}<>|/\\  +-*=_~  .,:;?!   @#$%^&  \"\`'"
    einfo "${stars}"
    echo
}


# Variables
luser=anon
lgroup=legion
lmount=/home/${luser}/persist
boot=/mnt/boot
live=/mnt/live
autos=/var/run/auto.media
otfefile=${boot}${OTFEFILE}
otfeflags=noatime,nosuid,nodev,acl,user_xattr


start() {
    mediaro=1
    # Determine boot device and its label
    mediadev=/dev/block/`mountpoint -d ${boot}`
    medialabel=`udevadm info -q property -p ${mediadev} | sed -n 's/^ID_FS_LABEL=//p'`

    if [ -n "${medialabel}" ]; then
        # Can result in duplicate autofs entries if label is later changed
        # to that of other media, and this service is then restarted
        ebegin "Creating ${boot} -> /media/${medialabel} alias"
        sed -i "s@^[^#].*\( [^ ]* :${boot}\$\)@\"${medialabel}\"\1@" ${autos}
        eend $?
    fi


    # Remount media root read-write (for non-cd/dvd)
    get_bootparam 'readonly' || mediaro=`blockdev --getro ${mediadev} 2>/dev/null` || mediaro=1
    if [ ${mediaro} = 0 ]; then
        ebegin Remounting ${boot} read-write
        mount -o remount,rw ${boot} && /usr/bin/test -w ${boot}
        mediaro=$?
        eend ${mediaro}
    elif [ ! -e ${mediadev} ]; then
        ewarn Boot media device lost, not remounting
    else
        ewarn Boot media is read-only, not remounting
    fi


    # Proceed with OTFE attachment only if remount-rw succeeded
    # (a read-only persist directory is more problematic than tmpfs)
    if [ ${mediaro} = 0 ]; then
        # Add an OTFE line to /etc/fstab, so that autofs won't mount the LVM
        # device later, and for otfe-resize script to be able to mount it
        if ! grep -q "^/dev/mapper/${OTFEVOLUME} " /etc/fstab; then
            echo "/dev/mapper/${OTFEVOLUME} ${lmount} ext4 noauto,${otfeflags} 0 0" >> /etc/fstab
        fi

        # Initialize LUKS image mapping (create if it doesn't exist)
        if [ ! -e ${otfefile}  -o  -e ${otfefile}.tag ]; then
            mkdir -p -m 700 `dirname ${otfefile}`  &&  touch ${otfefile}.tag
            rm -f ${otfefile} ${otfefile}-hdr.bak

            # Round down to prevent problems with OTFESIZE=1
            freespace=$((`stat -fc '%a*%S' ${boot}`))
            otfesize=$((freespace * ${OTFESIZE} / (1024*1024)))

            #   4 MiB is the minimum possible size (rounded up to MiB)
            # 256 MiB is the limit here to avoid long OTFE creation times
            # (see /usr/local/sbin/otfe-resize)
            if [ ${otfesize} -lt 4 ]; then
                otfesize=4
            elif [ ${otfesize} -gt 256 ]; then
                otfesize=256
            fi

            # FAT has no sparse files, so insufficient space will fail here
            ebegin "Initializing ${otfesize} MiB encrypted storage (${OTFESIZE} of free space)"
            if [ -n "${otfesize}"  -a  -e ${otfefile}.tag ]  &&  truncate -s ${otfesize}M ${otfefile}; then
                chmod -f 600 ${otfefile}
                eend $?

                inittries=${OTFEPWDTRIES}
                while [ ${inittries} -ne 0 ]; do
                    eprompt Please specify new password for ${otfefile}
                    if cryptsetup -q -c ${OTFECIPHER} -s ${OTFEKEYSIZE} -h ${OTFEHASH} luksFormat ${otfefile}; then
                        eprompt Please re-enter the password for ${otfefile}
                        if cryptsetup -T 1 luksOpen ${otfefile} ${OTFEVOLUME}; then
                            rm ${otfefile}.tag
                            break
                        else
                            ewarn Passwords do not match
                        fi
                    fi

                    inittries=$((inittries-1))
                done

                if [ -e /dev/mapper/${OTFEVOLUME} ]; then
                    echo;  einfo 'OTFE initialized, run "sudo otfe-resize" to resize encrypted storage'

                    ebegin Backing up crypto header: ${otfefile}-hdr.bak
                    cryptsetup luksHeaderBackup --header-backup-file ${otfefile}-hdr.bak ${otfefile}
                    eend $?

                    ebegin Formatting encrypted storage: ${otfefile}
                    mke2fs -qF -t ext4 -T small -L "${OTFELABEL}" -m 0 /dev/mapper/${OTFEVOLUME}
                    eend $?
                else
                    rm ${otfefile}
                    eerror Failed to initialize encrypted storage
                fi
            else
                rm -f ${otfefile}
                eend 1 "Failed to create ${otfesize} MiB encrypted storage"
            fi
        else
            eprompt Please provide a password for ${otfefile}

            if ! cryptsetup -T ${OTFEPWDTRIES} luksOpen ${otfefile} ${OTFEVOLUME}; then
                eerror Failed to attach encrypted storage: ${otfefile}
            fi
            echo
        fi

    else
        ewarn Skipping OTFE persistence setup
    fi


    # Mount OTFE filesystem
    if [ -e /dev/mapper/${OTFEVOLUME} ]; then
        ebegin Mounting encrypted storage: ${lmount}
        mount ${lmount}
        eend $?
    fi


    # Verify directories and reset file permissions
    # NOTE: service fails if this verification fails
    if mountpoint -q ${lmount}; then
        ebegin Verifying persistence directories and permissions

        # newlines in filename are converted to \012 by getfacl
        getfacl -npsR ${lmount} | sed -n 's/^# file: //p' | xargs -rd '\n' setfacl -b --

        # similar to cp -an, but without unnecessary inode changes
        rsync -x -rlpgo --include='**/' --exclude='/**' ${live}${lmount}/ ${lmount}
        rsync -x -rlpgo --ignore-existing               ${live}${lmount}/ ${lmount}

        # ownership
        find ${lmount} -xdev \
            ! \( -user ${luser} -group ${lgroup} \) -print0   \
            | xargs -0r chown -h ${luser}:${lgroup} --

        # permissions (sloppy w.r.t dirs, but rsync takes care of dirs that matter)
        find ${lmount} -xdev -perm /6007 -type d -print0 | xargs -0r chmod ug-s,o-rwx --
        find ${lmount} -xdev \
            -perm /7077 ! -type d ! -type l -print0 | xargs -0r chmod go=,u-s --

        eend $?
    fi
}


stop() {
    # Unmount the persistent fs
    if mountpoint -q ${lmount}; then
        ebegin Unmounting ${lmount}
        umount ${lmount}
        eend $?
    fi


    # Detach encrypted volume
    if [ -e /dev/mapper/${OTFEVOLUME} ]; then
        ebegin Detaching encrypted storage
        cryptsetup luksClose ${OTFEVOLUME}
        eend $?

    fi


    # Remount media root read-only
    # (apparently, does not conflict with write cache)
    ebegin Remounting ${boot} read-only
    mount -o remount,ro ${boot}
    eend $?
}
