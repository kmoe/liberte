#!/bin/sh -e

luser=anon
nofw=nofw

# ReachableAddresses ports in /etc/tor/torrc [uid=tor]
# (allow high ports in order to support most bridges)
torports=80,443,1024:65535

# VPN TCP/UDP server ports (PPTP, OpenVPN, Cisco) [uid=root]
vpntports=https,imaps,1723,openvpn,10000
vpnuports=openvpn,1149,isakmp,ipsec-nat-t,10000

# Ports used by HotSpot registration pages [uid=nofw]
hotspot=http,https,webcache,tproxy,3128,3660,8088,11523,58080,1024:65535

# LED blinking delay
leddelay=500
ledexclude='backlight|touchpad|thinklight|illumination'

# Usage profile (supported: noanon)
profile=/var/run/usage-profile


# For "noanon" usage profile, move all rights of ${nofw} to ${luser},
# and allow DNS for "root" (easier VPN setup)
if grep -qs '^noanon$' ${profile}; then
    nofw=${luser}
    hotspot=1:65535
    vpntports=domain,${vpntports}
    vpnuports=domain,${vpnuports}
fi


# Default policies
iptables -P INPUT   DROP
iptables -P FORWARD DROP
iptables -P OUTPUT  DROP

# Flush all rules
iptables -F
iptables -X

# Define custom chains
iptables -N LOGDROP
iptables -N LOGREJECT


# --- Packet dropping ---
# iptables -A LOGDROP   -j LOG      --log-prefix "fw-drop: " --log-level debug --log-uid
iptables -A LOGDROP   -j LED    --led-trigger-id drop    --led-delay ${leddelay}
iptables -A LOGDROP   -j DROP

iptables -A LOGREJECT -j LOG    --log-prefix "fw-deny: " --log-level debug --log-uid
iptables -A LOGREJECT -j LED    --led-trigger-id drop    --led-delay ${leddelay}
iptables -A LOGREJECT -j REJECT --reject-with icmp-admin-prohibited


# --- IP ---

# Allow existing/related connections packets through (TCP + UDP-in + GRE/ESP + ICMP-in errors)
iptables -A INPUT  -p tcp  -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A OUTPUT -p tcp  -m state --state ESTABLISHED,RELATED -j ACCEPT

iptables -A INPUT  -p udp  -m state --state ESTABLISHED,RELATED -j ACCEPT

iptables -A INPUT  -p gre  -m state --state ESTABLISHED,RELATED     -j ACCEPT
iptables -A OUTPUT -p gre  -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT

iptables -A INPUT  -p esp  -m state --state ESTABLISHED,RELATED     -j ACCEPT
iptables -A OUTPUT -p esp  -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT

iptables -A INPUT  -p icmp --icmp-type destination-unreachable -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A INPUT  -p icmp --icmp-type time-exceeded           -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A INPUT  -p icmp --icmp-type source-quench           -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A INPUT  -p icmp --icmp-type parameter-problem       -m state --state ESTABLISHED,RELATED -j ACCEPT

# Allow rate-limited incoming unicast ICMP ping, and related echo reply
iptables -A INPUT  -p icmp --icmp-type echo-request -m addrtype --dst-type LOCAL -m limit --limit 20/minute -j ACCEPT
iptables -A OUTPUT -p icmp --icmp-type echo-reply   -m state --state ESTABLISHED,RELATED -j ACCEPT


# --- Loopback ---
# NOTE: owner match doesn't work with the INPUT chain

# NTP server modification permission to ntpd user only (or root in pre-DNS phase)
iptables -A OUTPUT -o lo -p udp -m owner --uid-owner root -d 127.0.0.1 --dport ntp -j ACCEPT
iptables -A OUTPUT -o lo -p udp -m owner --uid-owner ntp  -d 127.0.0.1 --dport ntp -j ACCEPT
iptables -A OUTPUT -o lo -p udp                           -d 127.0.0.1 --dport ntp -j LOGREJECT

# Hidden service server access only for Tor
iptables -A OUTPUT -o lo -p tcp -m owner --uid-owner tor      --syn -d 127.0.0.1 --dport 9080 -j ACCEPT
iptables -A OUTPUT       -p tcp                               --syn -d 127.0.0.1 --dport 9080 -j LOGREJECT

# Privoxy access only for main user and cables daemon
iptables -A OUTPUT -o lo -p tcp -m owner --uid-owner ${luser} --syn -d 127.0.0.1 --dport 8118 -j ACCEPT
iptables -A OUTPUT       -p tcp                               --syn -d 127.0.0.1 --dport 8118 -j LOGREJECT

# Tor access via SOCKS only for main user and Privoxy
iptables -A OUTPUT -o lo -p tcp -m owner --uid-owner ${luser} --syn -d 127.0.0.1 --dport 9050 -j ACCEPT
iptables -A OUTPUT -o lo -p tcp -m owner --uid-owner privoxy  --syn -d 127.0.0.1 --dport 9050 -j ACCEPT
iptables -A OUTPUT       -p tcp                               --syn -d 127.0.0.1 --dport 9050 -j LOGREJECT

# Tor control port access only for Tor user
iptables -A OUTPUT -o lo -p tcp -m owner --uid-owner tor      --syn -d 127.0.0.1 --dport 9051 -j ACCEPT
iptables -A OUTPUT       -p tcp                               --syn -d 127.0.0.1 --dport 9051 -j LOGREJECT

# Pass other loopback packets through
iptables -A INPUT  -i lo -j ACCEPT
iptables -A OUTPUT -o lo -j ACCEPT


# --- External Communications ---

# DHCP and NTP client communication
iptables -A OUTPUT -p udp                              --sport bootpc --dport bootps -j ACCEPT
iptables -A OUTPUT -p udp                              --sport ntp    --dport ntp    -j ACCEPT

# DNS use for NTP server [resolves as root] and non-firewalled user.
# NetworkManager applet also resolved VPN hostnames as root (via D-Bus)
# NOTE: NTP will possibly resolve as uid=ntp starting with 4.2.7
iptables -A OUTPUT -p udp -m owner --uid-owner root          --dport domain -j ACCEPT
iptables -A OUTPUT -p udp -m owner --uid-owner ${nofw}       --dport domain -j ACCEPT
iptables -A OUTPUT -p tcp -m owner --uid-owner root    --syn --dport domain -j ACCEPT
iptables -A OUTPUT -p tcp -m owner --uid-owner ${nofw} --syn --dport domain -j ACCEPT

# In "noanon" profile, Privoxy can use DNS
if [ ${luser} = ${nofw} ]; then
    iptables -A OUTPUT -p udp -m owner --uid-owner privoxy       --dport domain -j ACCEPT
    iptables -A OUTPUT -p tcp -m owner --uid-owner privoxy --syn --dport domain -j ACCEPT
fi

# VPN connections (root-initiated)
iptables -A OUTPUT -p tcp -m owner --uid-owner root    --syn -m multiport --dports ${vpntports} -j ACCEPT
iptables -A OUTPUT -p udp -m owner --uid-owner root          -m multiport --dports ${vpnuports} -j ACCEPT

# Let Tor initiate connections to its ReachableAddresses ports
iptables -A OUTPUT -p tcp -m owner --uid-owner tor     --syn -m multiport --dports ${torports}  -j ACCEPT

# HTTP(S) (including HotSpot ports) communication for non-firewalled user
iptables -A OUTPUT -p tcp -m owner --uid-owner ${nofw} --syn -m multiport --dports ${hotspot}   -j ACCEPT

# In "noanon" profile, Privoxy can access same ports as main user
if [ ${luser} = ${nofw} ]; then
    iptables -A OUTPUT -p tcp -m owner --uid-owner privoxy --syn -m multiport --dports ${hotspot}   -j ACCEPT
fi

# Log all other packets
iptables -A INPUT   -j LOGDROP
iptables -A FORWARD -j LOGDROP
iptables -A OUTPUT  -j LOGREJECT


# --- LED blinking ---

# Assign "drop" trigger to any unused leds
set +e

leds=/sys/class/leds
find ${leds} -mindepth 1 -maxdepth 1 -regextype posix-egrep \
             ! -iregex ${leds}/".*(${ledexclude}).*" -printf '%P\n' 2>/dev/null | \
while read led; do
    if grep -qs '\[none\]' ${leds}/"${led}"/trigger; then
        echo "  LED for packets drops: ${led}"
        echo netfilter-drop > ${leds}/"${led}"/trigger
    fi
done

:
